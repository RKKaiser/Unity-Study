using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;

public class ThirdMove : MonoBehaviour
{
    private CharacterController _controller;
    private GameObject _mainCamera;
    public Vector3 startPosition;
    void Start()
    {
        startPosition = transform.position; // 记录玩家的初始位置
        if (_mainCamera == null)
        {
            _mainCamera = GameObject.FindGameObjectWithTag("MainCamera");
        }
        _controller = GetComponent<CharacterController>();
    }
    public float speed = 6.0f;
    float _targetRot = 0f;
    float _rotationVelocity;
    float _rotationSmoothTime = 0.1f;
    bool _isGrounded;
    float _verticalVelocity;
    const float gravity = -.091f;
    const float jumpHeight =0.004f;
    void Update()
    {
        if (transform.position.y < -20)

        {
            int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;
            // 加载当前场景
            SceneManager.LoadScene(currentSceneIndex);
        }
        _isGrounded = _controller.isGrounded;

        // 每帧重置垂直速度，如果在地面则设置为0
        if (_isGrounded && _verticalVelocity < 0)
        {
            _verticalVelocity = 0f;
        }

        // 更新跳跃逻辑
        if (Input.GetButtonDown("Jump"))
        {
            _verticalVelocity += Mathf.Sqrt(jumpHeight * -2f * gravity); // 根据跳跃高度计算跳跃速度
        }

        // 应用重力
        _verticalVelocity += gravity * Time.deltaTime;

        // 计算运动向量
        Vector3 velocity = new Vector3(0, _verticalVelocity, 0); // 垂直速度
        if (_move != Vector2.zero)
        {
            Vector3 inputDir = new Vector3(_move.x, 0f, _move.y).normalized;
            _targetRot = Mathf.Atan2(inputDir.x, inputDir.z) * Mathf.Rad2Deg + _mainCamera.transform.eulerAngles.y;
            float rotation = Mathf.SmoothDampAngle(transform.eulerAngles.y, _targetRot, ref _rotationVelocity, _rotationSmoothTime);
            transform.rotation = Quaternion.Euler(0f, rotation, 0f);
            Vector3 targetDir = Quaternion.Euler(0f, _targetRot, 0f) * Vector3.forward;
            velocity += targetDir.normalized * speed * Time.deltaTime;
        }
        _controller.Move(velocity);
    }
    Vector2 _move;
    void OnMove(InputValue value)
    {
        _move =value.Get<Vector2>();
    }
    void Respawn()
    {
        transform.position = startPosition; // 将玩家位置重置为初始位置
    }
}
